name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest requests
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run basic tests
      run: |
        # Run our custom test suite
        python test_basic.py
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: docker build -t whisper-timestamped .
    
    - name: Verify Docker image
      run: |
        # Check if the image was built successfully
        docker images | grep whisper-timestamped
        # Verify the image has the expected structure
        docker run --rm whisper-timestamped ls -la /app
    
    - name: Test service startup (without models)
      run: |
        # Start service and check if it starts without errors
        # We'll stop it quickly before it tries to load models
        timeout 30s docker run --rm -p 8000:8000 whisper-timestamped python app.py &
        sleep 5
        
        # Check if the process is running
        if pgrep -f "python app.py"; then
          echo "Service started successfully"
          pkill -f "python app.py" || true
        else
          echo "Service failed to start"
          exit 1
        fi
    
    - name: Test Docker Compose syntax
      run: |
        # Verify docker-compose.yml is valid
        docker-compose config
    
    - name: Cleanup
      if: always()
      run: |
        docker system prune -f
        docker rmi whisper-timestamped || true 